---
import Product from "./product.astro";
import { getCollection, type CollectionEntry } from "astro:content";
import { z } from "zod";

type Product = CollectionEntry<"products">;

// Zod schema for product validation
const ProductSchema = z.object({
  Name: z.string(),
  Blurb: z.string(),
  Slug: z.string(),
  Price: z.union([z.number(), z.string().transform((val) => Number(val))]).default(299),
  Thumbnail: z.string().optional(),
});

// Fetch products from Airtable
const tableProducts = await getCollection("products");

// Filter out empty products and validate
const products = tableProducts
  .filter((product: Product) => product.data !== undefined && Object.keys(product.data).length > 0)
  .map((product: Product) => {
    const validation = ProductSchema.safeParse(product.data);
    if (!validation.success) {
      console.error(`Product validation failed for ${product.id}:`, validation.error);
      return null;
    }
    return {
      title: validation.data.Name,
      price: validation.data.Price,
      href: `/product/${validation.data.Slug}`,
      image:
        validation.data.Thumbnail ||
        "https://ourahealth.imgix.net/home/OR3-bfcm.jpg?ixlib=js-3.8.0&auto=format&fit=max&fm=png&q=70&w=3840&s=3aa4dcf4f6b3dbedd3d326402307de1b",
    };
  })
  .filter((product): product is NonNullable<typeof product> => product !== null);
---

<div class="flex flex-wrap gap-6 mx-auto px-4">
  {
    products.map((product) => (
      <div class="flex-1 basis-[280px] relative group">
        <Product {...product} />
      </div>
    ))
  }
</div>
